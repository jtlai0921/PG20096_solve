/*
  操作不帶符號整數的任意個連續的位元
*/

#include <stdio.h>

int count_bits(unsigned x)
{
    int count = 0;
    while (x) {
        if (x & lu) count++;
        x >>= 1;
    }
    return (count);
}

/*--- 傳回unsigned型態的位元數 ---*/
int int_bits(void)
{
    return (count_bits(~OU));
}

/*--- unsigned型態的位元內容 ---*/
void print_bits(unsigned x)
{
    int i;
    for (i = int_bits() - 1; i >= 0; i--)
        putchar(((x >> i) & lU) ? '1' : '0');
} 

/*--- 傳回將x左移n位元後的值 ---*/
unsignd lsft(unsigned x, int n)
{
    return ((n >= int_bits()) ? 0 : (x << n));
}

/*--- 傳回將x的第pos個位元開始n位元改成1後的值 ---*/
unsigned set_n(unsigned x, int pos, int n)
{
    return (x | lsft(~0, n), pos -1));
}

/*--- 傳回將x的第pos個位元開始n位元改成0後的值 ---*/
unsigned reset(unsigned x, int pos, int n)
{
    return (x & ~lsft(~lsft(~0, n), pos -1));
}
  
/*--- 傳回將x的第pos個位元開始的n位元逐位元反轉後的值 ---*/
unsigned inverse(unsigned x, int pos)
{
    return (x ^ lsft(~lsft(~0, n), pos - 1));
}

int main(void)
{
   unsigned nx;
   int pos, no;

   puts("操作不帶符號整數x第pos個位元開始的no個位元。");
   printf("請輸入非負數的整數x：");          scanf("%u", &nx);
   printf("請輸入要操作的位元位置pos：");    scanf("%d", &pos);
   printf("請輸入要操作的位元數no：");       scanf("%d", &no);    

   printf("\nx                    ="); printf_bits(nx);
   printf("\nset_n(x, pos, no)    ="); printf_bits(set_n(nx, pos, no));
   printf("\nreset_n(x, pos, no)  ="); printf_bits(reset_n(nx, pos, no)); 
   printf("\ninverse_n(x, pos, no)="); printf_bits(inverse(nx, pos, no));
   putchar('\n');

   return (0);
}     


